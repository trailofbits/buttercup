# Buttercup CRS - Local Development Docker Compose
# Simplified configuration for local development on macOS

# Include competition server for local testing
include:
  - ./competition-server/compose.yaml

services:
  # Core Infrastructure Services
  redis:
    image: redis:7.4.2
    restart: unless-stopped
    ports:
      - '127.0.0.1:6379:6379'
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5

  # Docker-in-Docker removed for local macOS deployment
  # Using Docker Desktop's host socket instead

  # AI/LLM Proxy Service (Optional - can use uvx instead)
  # To run with uvx: uvx litellm --config ./litellm/litellm_config.yaml --port 8080
  litellm:
    image: litellm:local-v1.57.8
    build:
      context: ./docker/litellm
      dockerfile: Dockerfile
      args:
        LITELLM_VERSION: v1.57.8-stable
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      DATABASE_URL: "postgresql://litellm_user:litellm_password11@litellm-db:5432/litellm"
    command: ["--config", "/app/config.yaml", "--port", "8080", "--num_workers", "1"]
    configs:
      - source: litellm_config
        target: /app/config.yaml
    env_file: .env
    depends_on:
      litellm-db:
        condition: service_healthy
    profiles:
      - full  # Only runs with --profile full

  litellm-db:
    image: postgres:17.2
    restart: unless-stopped
    environment:
      POSTGRES_DB: litellm
      POSTGRES_USER: litellm_user
      POSTGRES_PASSWORD: litellm_password11
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Core CRS Services
  task-server:
    build:
      context: .
      dockerfile: ./orchestrator/Dockerfile
    restart: unless-stopped
    command: ["buttercup-task-server"]
    ports:
      - "127.0.0.1:8000:8000"
    env_file: env.dev.compose
    depends_on:
      redis:
        condition: service_healthy

  scheduler:
    build:
      context: .
      dockerfile: ./orchestrator/Dockerfile
    restart: unless-stopped
    command: ["buttercup-scheduler", "serve"]
    volumes:
      - ./crs_scratch:/crs_scratch
      - ./tasks_storage:/tasks_storage
      - ./node_data_storage:/node_data
    env_file: env.dev.compose
    depends_on:
      redis:
        condition: service_healthy

  task-downloader:
    build:
      context: .
      dockerfile: ./orchestrator/Dockerfile
    restart: unless-stopped
    command: ["buttercup-task-downloader", "serve"]
    volumes:
      - ./tasks_storage:/tasks_storage
      - ./node_data_storage:/node_data
    env_file: env.dev.compose
    depends_on:
      redis:
        condition: service_healthy

  # Unified Fuzzer Service (replaces 4 separate services)
  unified-fuzzer:
    build:
      context: .
      dockerfile: ./fuzzer/dockerfiles/unified_fuzzer.Dockerfile
    restart: unless-stopped
    command: ["python", "-m", "buttercup.unified_fuzzer"]
    volumes:
      - ./crs_scratch:/crs_scratch
      - ./node_data_storage:/node_data
    env_file: env.dev.compose
    environment:
      # Override specific settings for local dev
      BUTTERCUP_UNIFIED_FUZZER_NUM_FUZZER_WORKERS: 1
      BUTTERCUP_UNIFIED_FUZZER_BUILDER_WDIR: /node_data/crs_scratch
      BUTTERCUP_UNIFIED_FUZZER_FUZZER_WDIR: /node_data/crs_scratch
      BUTTERCUP_UNIFIED_FUZZER_FUZZER_CRS_SCRATCH_DIR: /node_data/crs_scratch
      BUTTERCUP_UNIFIED_FUZZER_COVERAGE_WDIR: /node_data/crs_scratch
      BUTTERCUP_UNIFIED_FUZZER_TRACER_WDIR: /node_data/crs_scratch
    depends_on:
      redis:
        condition: service_healthy

  # Code Analysis Service
  program-model:
    build:
      context: .
      dockerfile: ./program-model/Dockerfile
    restart: unless-stopped
    command: ["buttercup-program-model", "serve"]
    env_file: env.dev.compose
    volumes:
      - ./crs_scratch:/crs_scratch
      - ./tasks_storage:/tasks_storage
      - ./node_data_storage:/node_data
    depends_on:
      redis:
        condition: service_healthy

  # Patch Generation Service
  patcher:
    build:
      context: .
      dockerfile: ./patcher/Dockerfile
    restart: unless-stopped
    command: ["buttercup-patcher", "serve"]
    volumes:
      - ./crs_scratch:/crs_scratch
      - ./node_data_storage:/node_data
    env_file: env.dev.compose
    environment:
      - LANGFUSE_HOST=${LANGFUSE_HOST}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
    depends_on:
      redis:
        condition: service_healthy

  # Seed Generation Service
  seed-gen:
    build:
      context: .
      dockerfile: ./seed-gen/Dockerfile
    restart: unless-stopped
    command: ["seed-gen", "server"]
    volumes:
      - ./crs_scratch:/crs_scratch
      - ./node_data_storage:/node_data
    env_file: env.dev.compose
    environment:
      - LANGFUSE_HOST=${LANGFUSE_HOST}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
    depends_on:
      redis:
        condition: service_healthy

  # Web UI for CRS
  buttercup-ui:
    build:
      context: .
      dockerfile: ./orchestrator/Dockerfile
    restart: unless-stopped
    command: ["buttercup-ui"]
    ports:
      - "127.0.0.1:1323:1323"
    env_file: env.dev.compose

# Configuration Files
configs:
  litellm_config:
    file: ./litellm/litellm_config.yaml

# Note: No volume definitions needed for local development
# All data is stored in local directories mounted directly