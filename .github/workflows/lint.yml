name: Lint

on:
  push:
    branches:
      - main
    # Always run full suite on main branch
  pull_request:
    paths:
      # Component-specific triggers
      - 'common/**'
      - 'orchestrator/**'
      - 'fuzzer/**'
      - 'program-model/**'
      - 'seed-gen/**'
      - 'patcher/**'
      # Workflow changes
      - '.github/workflows/lint.yml'
      - '.github/workflows/tests.yml'
      # Global configuration that affects linting
      - 'Makefile'
      - 'protoc.sh'
      - '**/*.proto'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Detect which components need linting based on changed files
  changes:
    runs-on: ubuntu-latest
    outputs:
      common: ${{ steps.filter.outputs.common }}
      orchestrator: ${{ steps.filter.outputs.orchestrator }}
      fuzzer: ${{ steps.filter.outputs.fuzzer }}
      program-model: ${{ steps.filter.outputs.program-model }}
      seed-gen: ${{ steps.filter.outputs.seed-gen }}
      patcher: ${{ steps.filter.outputs.patcher }}
      run-all: ${{ steps.filter.outputs.workflow || steps.filter.outputs.global }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            common:
              - 'common/**'
            orchestrator:
              - 'orchestrator/**'
            fuzzer:
              - 'fuzzer/**'
            program-model:
              - 'program-model/**'
            seed-gen:
              - 'seed-gen/**'
            patcher:
              - 'patcher/**'
            workflow:
              - '.github/workflows/lint.yml'
            global:
              - 'Makefile'
              - 'protoc.sh'
              - '**/*.proto'

  lint:
    needs: changes
    # Run if any component changed OR if we need to run all
    if: |
      needs.changes.outputs.run-all == 'true' ||
      needs.changes.outputs.common == 'true' ||
      needs.changes.outputs.orchestrator == 'true' ||
      needs.changes.outputs.program-model == 'true' ||
      needs.changes.outputs.seed-gen == 'true' ||
      needs.changes.outputs.patcher == 'true'
    strategy:
      fail-fast: false  # Continue running other components even if one fails
      matrix:
        include:
          - component: common
            should_run: ${{ needs.changes.outputs.common == 'true' || needs.changes.outputs.run-all == 'true' }}
          - component: orchestrator
            should_run: ${{ needs.changes.outputs.orchestrator == 'true' || needs.changes.outputs.run-all == 'true' }}
          - component: program-model
            should_run: ${{ needs.changes.outputs.program-model == 'true' || needs.changes.outputs.run-all == 'true' }}
          - component: seed-gen
            should_run: ${{ needs.changes.outputs.seed-gen == 'true' || needs.changes.outputs.run-all == 'true' }}
          - component: patcher
            should_run: ${{ needs.changes.outputs.patcher == 'true' || needs.changes.outputs.run-all == 'true' }}

    runs-on: ubuntu-latest
    if: matrix.should_run
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Setup uv cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.local/share/uv
          key: ${{ runner.os }}-uv-${{ matrix.component }}-${{ hashFiles(format('{0}/uv.lock', matrix.component)) }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ matrix.component }}-
            ${{ runner.os }}-uv-

      - name: Setup ${{ matrix.component }} component
        run: uv sync --all-extras
        working-directory: ${{ matrix.component }}

      - name: Run ruff on ${{ matrix.component }}
        run: |
          uv run ruff format --check --diff
          uv run ruff check --output-format=github
        working-directory: ${{ matrix.component }}

      - name: Run mypy on ${{ matrix.component }}
        run: uv run mypy
        working-directory: ${{ matrix.component }}

  # Lint fuzzer component
  lint-fuzzer:
    needs: changes
    # Only run if fuzzer changed or we need to run all
    if: needs.changes.outputs.fuzzer == 'true' || needs.changes.outputs.run-all == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Setup uv cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.local/share/uv
          key: ${{ runner.os }}-uv-fuzzer-${{ hashFiles('fuzzer/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-fuzzer-
            ${{ runner.os }}-uv-

      - name: Setup fuzzer component
        run: uv sync --all-extras
        working-directory: fuzzer

      - name: Run ruff on fuzzer
        run: |
          uv run ruff format --check --diff
          uv run ruff check --output-format=github
        working-directory: fuzzer

      # Type checking for fuzzer has known issues due to complex dependencies
      # and external library type stubs. This is technical debt, not instability.
      - name: Run mypy on fuzzer
        run: uv run mypy
        working-directory: fuzzer
        continue-on-error: true  # Known type checking issues - tracked for future resolution
        
      - name: Report mypy status
        if: failure()
        run: echo "::warning file=fuzzer::Fuzzer component has type checking issues that need attention"

  check-protobuf:
    needs: changes
    # Run if protobuf files changed or we need to run all
    if: needs.changes.outputs.run-all == 'true' || contains(github.event.head_commit.modified, '.proto') || contains(github.event.head_commit.modified, 'protoc.sh')
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Generate protobufs
        run: |
          # Generate fresh protobufs
          ./protoc.sh

          # Check if any files were modified
          if ! git diff --quiet common/src/buttercup/common/datastructures; then
            echo "Error: Generated protobufs differ from committed files"
            exit 1
          fi
