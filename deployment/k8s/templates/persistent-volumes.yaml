{{- if eq .Values.global.environment "aks" }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: azurefile-csi-nfs-{{ .Release.Namespace }}
provisioner: file.csi.azure.com
allowVolumeExpansion: true
parameters:
  protocol: nfs
  skuName: Premium_LRS

reclaimPolicy: Retain
mountOptions:
  - nconnect=4
  - noresvport
  - actimeo=30
{{- end }}
---

{{- if .Values.volumes.tasks_storage.enabled }}
{{- if eq .Values.environment "minikube" }}
# For Minikube environment, create a hostPath PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-tasks-storage
spec:
  capacity:
    storage: {{ .Values.volumes.tasks_storage.size }}
  accessModes:
    - {{ .Values.volumes.tasks_storage.accessMode }}
  {{- if .Values.volumes.tasks_storage.storageClass }}
  storageClassName: {{ .Values.volumes.tasks_storage.storageClass }}
  {{- end }}
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /data/{{ .Release.Name }}-tasks-storage
    type: DirectoryOrCreate
{{- end }}
---
# PVC will be used in both Minikube and AKS environments
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-tasks-storage
spec:
  accessModes:
    - {{ .Values.volumes.tasks_storage.accessMode }}
  resources:
    requests:
      storage: {{ .Values.volumes.tasks_storage.size }}
  {{- if .Values.volumes.tasks_storage.storageClass }}
  storageClassName: {{ .Values.volumes.tasks_storage.storageClass }}
  {{- end }}
{{- end }}
---
{{- if .Values.volumes.crs_scratch.enabled }}
{{- if eq .Values.environment "minikube" }}
# For Minikube environment, create a hostPath PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-crs-scratch
spec:
  capacity:
    storage: {{ .Values.volumes.crs_scratch.size }}
  accessModes:
    - {{ .Values.volumes.crs_scratch.accessMode }}
  {{- if .Values.volumes.crs_scratch.storageClass }}
  storageClassName: {{ .Values.volumes.crs_scratch.storageClass }}
  {{- end }}
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /data/{{ .Release.Name }}-crs-scratch
    type: DirectoryOrCreate
{{- end }}
---
# PVC will be used in both Minikube and AKS environments
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-crs-scratch
spec:
  accessModes:
    - {{ .Values.volumes.crs_scratch.accessMode }}
  resources:
    requests:
      storage: {{ .Values.volumes.crs_scratch.size }}
  {{- if .Values.volumes.crs_scratch.storageClass }}
  storageClassName: {{ .Values.volumes.crs_scratch.storageClass }}
  {{- end }}
{{- end }}
---

{{- if .Values.ui.enabled }}
{{- if eq .Values.environment "minikube" }}
# For Minikube environment, create a hostPath PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Release.Name }}-ui-db
spec:
  capacity:
    storage: {{ .Values.volumes.ui_db.size }}
  accessModes:
    - {{ .Values.volumes.ui_db.accessMode }}
  {{- if .Values.volumes.ui_db.storageClass }}
  storageClassName: {{ .Values.volumes.ui_db.storageClass }}
  {{- end }}
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /data/{{ .Release.Name }}-ui-db
    type: DirectoryOrCreate
{{- end }}
---
# PVC will be used in both Minikube and AKS environments
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-ui-db
spec:
  accessModes:
    - {{ .Values.volumes.ui_db.accessMode }}
  resources:
    requests:
      storage: {{ .Values.volumes.ui_db.size }}
  {{- if .Values.volumes.ui_db.storageClass }}
  storageClassName: {{ .Values.volumes.ui_db.storageClass }}
  {{- end }}
{{- end }}
