# generated by fastapi-codegen:
#   filename:  /tmp/tmp.VWuWL8tFKl/openapi.json
#   timestamp: 2025-07-08T08:17:32+00:00

# mypy: ignore-errors

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Dict, List, Optional

from pydantic import BaseModel, Field, StringConstraints


class Architecture(Enum):
    ArchitectureX8664 = "x86_64"


class Assessment(Enum):
    AssessmentCorrect = "correct"
    AssessmentIncorrect = "incorrect"


class BundleSubmission(BaseModel):
    broadcast_sarif_id: Optional[str] = None
    description: Optional[str] = Field(
        None,
        description="optional plaintext description of the components of the bundle, such as would be found in a pull request description or bug report",
    )
    freeform_id: Optional[str] = None
    patch_id: Optional[str] = None
    pov_id: Optional[str] = None
    submitted_sarif_id: Optional[str] = None


class Error(BaseModel):
    fields: Optional[Dict[str, str]] = None
    message: str


class FreeformSubmission(BaseModel):
    submission: str = Field(
        ...,
        description="Base64 encoded arbitrary data\n\n2MiB max size before Base64 encoding",
    )


class FuzzingEngine(Enum):
    FuzzingEngineLibFuzzer = "libfuzzer"


class Message(BaseModel):
    message: Optional[str] = None


class POVSubmission(BaseModel):
    architecture: Architecture
    engine: FuzzingEngine
    fuzzer_name: Annotated[str, StringConstraints(max_length=4096)] = Field(
        ..., description="Fuzz Tooling fuzzer that exercises this vuln\n\n4KiB max size"
    )
    sanitizer: Annotated[str, StringConstraints(max_length=4096)] = Field(
        ...,
        description="Fuzz Tooling Sanitizer that exercises this vuln\n\n4KiB max size",
    )
    testcase: str = Field(
        ...,
        description="Base64 encoded vuln trigger\n\n2MiB max size before Base64 encoding",
    )


class PatchSubmission(BaseModel):
    patch: str = Field(
        ...,
        description="Base64 encoded patch in unified diff format\n\n100KiB max size before Base64 encoding",
    )


class PingResponse(BaseModel):
    status: str


class RequestListResponse(BaseModel):
    challenges: List[str] = Field(..., description="List of challenges that competitors may task themselves with")


class RequestSubmission(BaseModel):
    duration_secs: Optional[int] = Field(
        None,
        description="Time in seconds until a task should expire. If not provided, defaults to 3600.",
    )


class SARIFSubmission(BaseModel):
    sarif: Dict[str, Any] = Field(..., description="SARIF object compliant with the provided schema")


class SarifAssessmentSubmission(BaseModel):
    assessment: Assessment
    description: Annotated[str, StringConstraints(max_length=131072)] = Field(
        ...,
        description="Plain text reasoning for the assessment.\n\nMust be nonempty.\n\n128KiB max size",
    )


class SubmissionStatus(Enum):
    SubmissionStatusAccepted = "accepted"
    SubmissionStatusPassed = "passed"
    SubmissionStatusFailed = "failed"
    SubmissionStatusDeadlineExceeded = "deadline_exceeded"
    SubmissionStatusErrored = "errored"
    SubmissionStatusInconclusive = "inconclusive"


class BundleSubmissionResponse(BaseModel):
    bundle_id: str
    status: SubmissionStatus = Field(
        ...,
        description="Schema-compliant submissions will only ever receive the statuses accepted or deadline_exceeded",
    )


class BundleSubmissionResponseVerbose(BaseModel):
    broadcast_sarif_id: Optional[str] = None
    bundle_id: str
    description: Optional[str] = None
    freeform_id: Optional[str] = None
    patch_id: Optional[str] = None
    pov_id: Optional[str] = None
    status: SubmissionStatus = Field(
        ...,
        description="Schema-compliant submissions will only ever receive the statuses accepted or deadline_exceeded",
    )
    submitted_sarif_id: Optional[str] = None


class FreeformResponse(BaseModel):
    freeform_id: str
    status: SubmissionStatus = Field(
        ...,
        description="Schema-compliant submissions will only ever receive the statuses accepted or deadline_exceeded",
    )


class POVSubmissionResponse(BaseModel):
    pov_id: str
    status: SubmissionStatus


class PatchSubmissionResponse(BaseModel):
    functionality_tests_passing: Optional[bool] = Field(None, description="null indicates the tests have not been run")
    patch_id: str
    status: SubmissionStatus


class SARIFSubmissionResponse(BaseModel):
    status: SubmissionStatus = Field(
        ...,
        description="Schema-compliant submissions will only ever receive the statuses accepted or deadline_exceeded",
    )
    submitted_sarif_id: str


class SarifAssessmentResponse(BaseModel):
    status: SubmissionStatus
